name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract repository/service name
        id: extract-name
        run: echo "REPO_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV

      - name: Extract current version from package.json
        id: get-version
        run: |
          # Extract version from package.json and remove -snapshot if present
          version=$(node -p "require('./package.json').version.replace('-snapshot', '')")
          echo "VERSION=$version" >> $GITHUB_ENV  

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      #      - name: Build and Push Docker image to ECR
      #        uses: docker/build-push-action@v2
      #        run: |
      #          # Build the Docker image
      #          docker build -t ${{ env.REPO_NAME }}:${{ github.sha }} -f Dockerfile .
      #
      #          # Tag the Docker image for ECR
      #          docker tag ${{ env.REPO_NAME }}:${{ env.VERSION }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.REPO_NAME }}:${{ env.VERSION }}
      #
      #          # Push the Docker image to ECR
      #          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.REPO_NAME }}:${{ env.VERSION }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/privatediregistry:${{ env.REPO_NAME }}-${{ env.VERSION }}

      - name: Create GitHub Tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            # Create a tag for the new release version
            git tag "v${{ env.VERSION }}"
            git push origin --tags
          fi

  bump-version:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set next snapshot version
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Auto-incrementing version"
            # Extract the version from package.json
            version=$(node -p "require('./package.json').version")
            # Split the version into major, minor, patch
            IFS='.' read -r major minor patch <<< "$version"
            # Increment the patch version
            next_patch=$((patch+1))
            # Set the new version to next snapshot
            new_version="${major}.${minor}.${next_patch}-snapshot"
            # Update package.json with the new version
            jq ".version = \"$new_version\"" package.json > tmp.$$.json && mv tmp.$$.json package.json
            # Commit the updated version to the main branch
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git commit -am "chore: bump version to ${new_version}"
            git push origin main
          fi
#  deploy-staging:
#    needs: build
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#    steps:
#      - name: Deploy to AWS (Staging)
#        run: |
#          echo "Deploying to AWS Staging..."
#          # Use AWS CLI to deploy to Staging environment
#          aws ecs update-service --cluster staging-cluster --service microfrontend-service --force-new-deployment
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#
#  deploy-production:
#    needs: build
#    runs-on: ubuntu-latest
#    if: github.event_name == 'workflow_dispatch'
#    steps:
#      - name: Deploy to AWS (Production)
#        run: |
#          echo "Deploying to AWS Production..."
#          aws ecs update-service --cluster production-cluster --service microfrontend-service --force-new-deployment
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_REGION: ${{ secrets.AWS_REGION }}